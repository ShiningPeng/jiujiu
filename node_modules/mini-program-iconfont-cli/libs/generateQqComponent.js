"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fs_1 = tslib_1.__importDefault(require("fs"));
var path_1 = tslib_1.__importStar(require("path"));
var mkdirp_1 = tslib_1.__importDefault(require("mkdirp"));
var glob_1 = tslib_1.__importDefault(require("glob"));
var colors_1 = tslib_1.__importDefault(require("colors"));
var getTemplate_1 = require("./getTemplate");
var replace_1 = require("./replace");
// import { whitespace } from './whitespace';
var ATTRIBUTE_FILL_MAP = ['path'];
exports.generateQqComponent = function (data, config) {
    var svgTemplates = [];
    var names = [];
    var saveDir = path_1.default.resolve(config.save_dir);
    var fileName = path_1.basename(config.save_dir) || 'iconfont';
    mkdirp_1.default.sync(saveDir);
    glob_1.default.sync(path_1.default.join(saveDir, '*')).forEach(function (file) { return fs_1.default.unlinkSync(file); });
    data.svg.symbol.forEach(function (item) {
        var iconId = item.$.id;
        var iconIdAfterTrim = config.trim_icon_prefix
            ? iconId.replace(new RegExp("^" + config.trim_icon_prefix + "(.+?)$"), function (_, value) { return value.replace(/^[-_.=+#@!~*]+(.+?)$/, '$1'); })
            : iconId;
        names.push(iconIdAfterTrim);
        svgTemplates.push("<!--" + iconIdAfterTrim + "-->\n<view qq:if=\"{{name === '" + iconIdAfterTrim + "'}}\" style=\"background-image: url({{quot}}data:image/svg+xml, " + generateCase(item) + "{{quot}});" +
            ' width: {{svgSize}}px; height: {{svgSize}}px; " class="icon" />');
        console.log(colors_1.default.green('√') + " Generated icon \"" + colors_1.default.yellow(iconId) + "\"");
    });
    fs_1.default.writeFileSync(path_1.default.join(saveDir, fileName + '.qss'), getTemplate_1.getTemplate('qq.qss'));
    fs_1.default.writeFileSync(path_1.default.join(saveDir, fileName + '.qml'), svgTemplates.join('\n\n'));
    var jsFile = getTemplate_1.getTemplate('qq.js');
    jsFile = replace_1.replaceSize(jsFile, config.default_icon_size);
    jsFile = replace_1.replaceNames(jsFile, names);
    jsFile = replace_1.replaceIsRpx(jsFile, config.use_rpx);
    fs_1.default.writeFileSync(path_1.default.join(saveDir, fileName + '.js'), jsFile);
    fs_1.default.writeFileSync(path_1.default.join(saveDir, fileName + '.json'), getTemplate_1.getTemplate('qq.json'));
    console.log("\n" + colors_1.default.green('√') + " All icons have been putted into dir: " + colors_1.default.green(config.save_dir) + "\n");
};
var generateCase = function (data) {
    var e_1, _a;
    var template = "<svg viewBox='" + data.$.viewBox + "' xmlns='http://www.w3.org/2000/svg' width='{{svgSize}}px' height='{{svgSize}}px'>";
    var _loop_1 = function (domName) {
        if (domName === '$') {
            return "continue";
        }
        var counter = {
            colorIndex: 0,
        };
        if (data[domName].$) {
            template += "<" + domName + addAttribute(domName, data[domName], counter) + " />";
        }
        else if (Array.isArray(data[domName])) {
            data[domName].forEach(function (sub) {
                template += "<" + domName + addAttribute(domName, sub, counter) + " />";
            });
        }
    };
    try {
        for (var _b = tslib_1.__values(Object.keys(data)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var domName = _c.value;
            _loop_1(domName);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    template += "</svg>";
    return template.replace(/<|>/g, function (matched) { return encodeURI(matched); });
};
var addAttribute = function (domName, sub, counter) {
    var e_2, _a;
    var template = '';
    if (sub && sub.$) {
        if (ATTRIBUTE_FILL_MAP.includes(domName)) {
            // Set default color same as in iconfont.cn
            // And create placeholder to inject color by user's behavior
            sub.$.fill = sub.$.fill || '#333333';
        }
        try {
            for (var _b = tslib_1.__values(Object.keys(sub.$)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var attributeName = _c.value;
                if (attributeName === 'fill') {
                    var color = sub.$[attributeName];
                    template += " " + attributeName + "='{{(isStr ? color : color[" + counter.colorIndex + "]) || '" + color + "'}}'";
                    counter.colorIndex += 1;
                }
                else {
                    template += " " + attributeName + "='" + sub.$[attributeName] + "'";
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
    }
    return template;
};
